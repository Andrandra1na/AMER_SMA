@startuml Diag-composant- Architecture Log
!theme materia
skinparam DefaultFontSize 40
skinparam TitleFontSize 55
skinparam CaptionFontSize 50
skinparam NoteFontSize 50
skinparam ActorFontSize 50
skinparam UsecaseFontSize 50

title **Diagramme de Composants - Architecture de la Plateforme**

skinparam componentStyle uml2


node "Navigateur Web du Client" as ClientNode {
    [**Frontend (Vue.js)**] as FE <<Application>>
}

node "Serveur Backend" as ServerNode {
    [**API Web (Flask)**] as API <<Interface REST>>
    
    package "Bibliothèque d'Agents IA" <<(Python)>> {
        [NLPAgent]
        [AudioAgent]
        [VideoAgent]
        [EmotionAgent]
        [RapportAgent]
    }
    
    folder "Artefacts IA (Stockage Disque)" as Storage {
       artifact "Modèles Pré-entraînés\n(.h5, .pkl, ...)" as Models
    }
}

node "Infrastructure de Tâches & Données" as InfraNode {
    [**Worker de Tâches (Celery)**] as Worker <<Processus>>
    queue "Broker (Redis)" as Broker
    database "Base de Données (PostgreSQL)" as DB
}

' --- Relations de Dépendance et de Communication ---

' Le Frontend communique avec l'API
FE --(0- API : API REST (HTTPS)

' L'API communique avec la BDD et le Broker
API --(0- DB
API .right.> Broker : Envoie Tâche

' Le Worker communique avec le Broker et la BDD
Worker .left.> Broker : Reçoit Tâche
Worker --(0- DB

' Le Worker utilise les agents
Worker ..> [NLPAgent] : utilise
Worker ..> [AudioAgent] : utilise
Worker ..> [VideoAgent] : utilise
Worker ..> [EmotionAgent] : utilise
Worker ..> [RapportAgent] : utilise

' Les Agents chargent les modèles
[NLPAgent] ..> Models
[EmotionAgent] ..> Models



@enduml