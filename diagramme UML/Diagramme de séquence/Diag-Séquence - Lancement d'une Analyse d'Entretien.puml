@startuml Diag-Séquence - Lancement d'une Analyse d'Entretien
!theme materia

skinparam DefaultFontSize 60
skinparam TitleFontSize 55
skinparam CaptionFontSize 60
skinparam NoteFontSize 60
skinparam ActorFontSize 60
skinparam UsecaseFontSize 60

title **Diagramme de Séquence - Flux d'Analyse Asynchrone**

autonumber "<b>[0]"
skinparam sequence {
    ActorBorderColor #005f73
    ParticipantBorderColor #005f73
    LifeLineBorderColor #0a9396
    ArrowColor #212529
    GroupHeaderFontColor #005f73
}

actor "Utilisateur (Recruteur)" as User
participant "Frontend\n(Vue.js)" as FE
participant "API Web\n(Flask)" as BE
participant "Broker\n(Redis)" as Broker
participant "Worker\n(Celery)" as Worker
database "Base de Données\n(PostgreSQL)" as DB

User -> FE: Clique sur "Lancer l'Analyse"
activate FE

FE -> BE: POST /api/report/generate/<id>
activate BE

BE -> DB: UPDATE Sessions SET statut='analyzing'
activate DB
DB --> BE: Succès
deactivate DB

BE -> Broker: Envoie la tâche `run_analysis_task(id)`
activate Broker
Broker --> BE: Acquittement (Task ID)
deactivate Broker

BE --> FE: **202 Accepted**
deactivate BE

FE -> User: Affiche "Analyse en cours..."
deactivate FE

... 5 secondes plus tard ...

Worker -> Broker: Récupère la tâche `run_analysis_task(id)`
activate Worker

Worker -> DB: GET Session, Questions, etc.
activate DB
DB --> Worker: Données nécessaires
deactivate DB

group **Pipeline d'Analyse Multimodale**
    Worker -> Worker: **VideoAgent**: Analyse du regard
    Worker -> Worker: **NLPAgent**: Transcription
    Worker -> Worker: **AudioAgent**: Analyse vocale
    Worker -> Worker: **EmotionAgent**: Analyse émotionnelle
end

Worker -> DB: INSERT/UPDATE Answers, Reports, etc.
activate DB
DB --> Worker: Succès
deactivate DB

Worker -> DB: UPDATE Sessions SET statut='analysis_complete'
activate DB
DB --> Worker: Succès
deactivate DB
deactivate Worker

@enduml