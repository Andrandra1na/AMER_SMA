@startuml Diag-Séquence - Déroulement d'un Entretien Candidat
!theme materia

skinparam DefaultFontSize 40
skinparam TitleFontSize 55
skinparam CaptionFontSize 50
skinparam NoteFontSize 50
skinparam ActorFontSize 50
skinparam UsecaseFontSize 50


title **Diagramme de Séquence - Déroulement d'un Entretien Candidat**

autonumber "<b>[0]"
skinparam sequence {
    ActorBorderColor #005f73
    ParticipantBorderColor #005f73
    LifeLineBorderColor #0a9396
    ArrowColor #212529
    GroupHeaderFontColor #005f73
}

actor Candidat as C
participant "Frontend\n(InterviewView.vue)" as FE
participant "API Web\n(Flask)" as BE
database "Base de Données\n(PostgreSQL)" as DB

C -> FE: Arrive sur la page /interview/<id>
activate FE

FE -> BE: GET /api/session/<id>/questions
activate BE
BE -> DB: SELECT Questions WHERE id IN (...)
activate DB
DB --> BE: Liste des questions
deactivate DB
BE --> FE: JSON des questions
deactivate BE

FE -> C: Affiche la première question

C -> FE: Clique sur "Démarrer l'enregistrement"
activate FE #LightSkyBlue
FE -> FE: recordEvent({q_id, timestamp: 0})
deactivate FE

loop Pour chaque question
    C -> FE: Répond à la question
    C -> FE: Clique sur "Suivant"
    activate FE #LightSkyBlue
    FE -> C: Affiche la question suivante
    FE -> FE: recordEvent({q_id, timestamp: elapsedTime})
    deactivate FE
end

C -> FE: Clique sur "Terminer cette tentative"
activate FE

FE -> FE: Arrête MediaRecorder\nCrée un fichier Blob\nCrée un FormData

FE -> BE: POST /api/upload/<id>\n(Multipart: Fichier Vidéo + JSON des events)
activate BE

BE -> DB: Vérifie les tentatives restantes
activate DB
DB --> BE: OK
deactivate DB

BE -> BE: Sauvegarde le fichier vidéo sur le disque
BE -> DB: UPDATE Sessions SET fichier_video, events_timeline
activate DB
DB --> BE: Succès
deactivate DB

BE --> FE: **200 OK** (Tentative enregistrée)
deactivate BE

FE -> C: Affiche "Tentative enregistrée ! Recommencer ?"
deactivate FE

@enduml